# YAML anchors for DRY configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

x-security: &default-security
  security_opt:
    - no-new-privileges:true
  read_only: false
  cap_drop:
    - ALL

x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '2.0'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 512M
  restart: unless-stopped

services:
  # Migration service - runs once to setup database
  migration:
    image: gomicro/goose:latest
    container_name: music-player-migration
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./auth-service/migrations:/migrations:ro
    command: >
      goose
      -dir=/migrations
      postgres "postgres://postgres:postgres123@postgres:5432/music_player?sslmode=disable"
      up
    networks:
      - music-player-internal
    restart: "no"

  # Infrastructure services (giữ nguyên)
  redis-stack:
    image: redis/redis-stack:latest
    container_name: music-player-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis_data:/data:Z
    environment:
      - REDIS_ARGS=--requirepass redispassword --appendonly yes --appendfsync everysec --maxmemory 1gb --maxmemory-policy allkeys-lru
      - REDIS_STACK_USERNAME=admin
      - REDIS_STACK_PASSWORD=redispassword
    networks:
      - music-player-internal
      - music-player-public
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD:-redispassword} ping | grep PONG || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  postgres:
    image: postgres:latest
    container_name: music-player-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: music_player
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
    networks:
      - music-player-internal
      - music-player-public
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d music_player"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: music-player-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - music-player-internal
      - music-player-public
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka with KRaft (no ZooKeeper needed)
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: music-player-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      
      # Listeners
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Cluster ID (generated with kafka-storage random-uuid)
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      
      # Storage
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      
      # Topic defaults
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      
      # Retention
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      
      # Performance
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka_data:/var/lib/kafka/data:Z
    networks:
      - music-player-internal
      - music-player-public
    command: >
      bash -c "
        # Format storage if not already formatted
        if [ ! -f /var/lib/kafka/data/meta.properties ]; then
          echo 'Formatting Kafka storage for KRaft mode...'
          kafka-storage format -t MkU3OEVBNTcwNTJENDM2Qk -c /etc/kafka/kafka.properties
        fi
        
        # Start Kafka
        /etc/confluent/docker/run
      "
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: music-player-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # No ZooKeeper needed in KRaft mode
      DYNAMIC_CONFIG_ENABLED: 'true'
      AUTH_TYPE: "DISABLED"
    networks:
      - music-player-internal
      - music-player-public
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # Services commented out - run locally with `go run ./cmd`
  # auth-service:
  #   build:
  #     context: ./services/auth-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3001:3001"
  #     - "50052:50052"
  
  # gateway:
  #   build:
  #     context: ./services/gateway
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  kafka_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/kafka

networks:
  music-player-internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
  music-player-public:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
