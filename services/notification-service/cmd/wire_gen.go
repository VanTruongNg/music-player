// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"notification/configs"
	"notification/internal/kafka/consumer"
	"notification/internal/kafka/producer"
)

// Injectors from wire.go:

func InitializeApp(app *configs.AppConfig, kafkaCfg *configs.KafkaConfig) (*App, error) {
	engine := provideRouter()
	producerProducer, err := producer.NewProducer(kafkaCfg)
	if err != nil {
		return nil, err
	}
	consumerConsumer, err := consumer.NewConsumer(kafkaCfg)
	if err != nil {
		return nil, err
	}
	mainApp := provideApp(engine, producerProducer, consumerConsumer)
	return mainApp, nil
}

// wire.go:

type App struct {
	Router        *gin.Engine
	KafkaProducer *producer.Producer
	KafkaConsumer *consumer.Consumer
}

func provideApp(router *gin.Engine, kafkaProducer *producer.Producer, kafkaConsumer *consumer.Consumer) *App {
	return &App{
		Router:        router,
		KafkaProducer: kafkaProducer,
		KafkaConsumer: kafkaConsumer,
	}
}

func provideRouter() *gin.Engine {
	r := gin.Default()

	return r
}
